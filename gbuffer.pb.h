// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gbuffer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gbuffer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gbuffer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gbuffer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gbuffer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gbuffer_2eproto;
namespace shorrent {
class Chunk;
class ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileList;
class FileListDefaultTypeInternal;
extern FileListDefaultTypeInternal _FileList_default_instance_;
class RegChunk;
class RegChunkDefaultTypeInternal;
extern RegChunkDefaultTypeInternal _RegChunk_default_instance_;
class RegFile;
class RegFileDefaultTypeInternal;
extern RegFileDefaultTypeInternal _RegFile_default_instance_;
}  // namespace shorrent
PROTOBUF_NAMESPACE_OPEN
template<> ::shorrent::Chunk* Arena::CreateMaybeMessage<::shorrent::Chunk>(Arena*);
template<> ::shorrent::File* Arena::CreateMaybeMessage<::shorrent::File>(Arena*);
template<> ::shorrent::FileList* Arena::CreateMaybeMessage<::shorrent::FileList>(Arena*);
template<> ::shorrent::RegChunk* Arena::CreateMaybeMessage<::shorrent::RegChunk>(Arena*);
template<> ::shorrent::RegFile* Arena::CreateMaybeMessage<::shorrent::RegFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace shorrent {

enum Chunk_ChunkState : int {
  Chunk_ChunkState_inTransfer = 0,
  Chunk_ChunkState_done = 1,
  Chunk_ChunkState_Chunk_ChunkState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Chunk_ChunkState_Chunk_ChunkState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Chunk_ChunkState_IsValid(int value);
constexpr Chunk_ChunkState Chunk_ChunkState_ChunkState_MIN = Chunk_ChunkState_inTransfer;
constexpr Chunk_ChunkState Chunk_ChunkState_ChunkState_MAX = Chunk_ChunkState_done;
constexpr int Chunk_ChunkState_ChunkState_ARRAYSIZE = Chunk_ChunkState_ChunkState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chunk_ChunkState_descriptor();
template<typename T>
inline const std::string& Chunk_ChunkState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chunk_ChunkState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chunk_ChunkState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chunk_ChunkState_descriptor(), enum_t_value);
}
inline bool Chunk_ChunkState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Chunk_ChunkState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chunk_ChunkState>(
    Chunk_ChunkState_descriptor(), name, value);
}
// ===================================================================

class Chunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shorrent.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  virtual ~Chunk();

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const final {
    return CreateMaybeMessage<Chunk>(nullptr);
  }

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shorrent.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gbuffer_2eproto);
    return ::descriptor_table_gbuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Chunk_ChunkState ChunkState;
  static constexpr ChunkState inTransfer =
    Chunk_ChunkState_inTransfer;
  static constexpr ChunkState done =
    Chunk_ChunkState_done;
  static inline bool ChunkState_IsValid(int value) {
    return Chunk_ChunkState_IsValid(value);
  }
  static constexpr ChunkState ChunkState_MIN =
    Chunk_ChunkState_ChunkState_MIN;
  static constexpr ChunkState ChunkState_MAX =
    Chunk_ChunkState_ChunkState_MAX;
  static constexpr int ChunkState_ARRAYSIZE =
    Chunk_ChunkState_ChunkState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChunkState_descriptor() {
    return Chunk_ChunkState_descriptor();
  }
  template<typename T>
  static inline const std::string& ChunkState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChunkState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChunkState_Name.");
    return Chunk_ChunkState_Name(enum_t_value);
  }
  static inline bool ChunkState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChunkState* value) {
    return Chunk_ChunkState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 6,
    kFilenameFieldNumber = 2,
    kPathFieldNumber = 3,
    kIdFieldNumber = 1,
    kSizeFieldNumber = 4,
    kStateFieldNumber = 5,
  };
  // repeated string peers = 6;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  const std::string& peers(int index) const;
  std::string* mutable_peers(int index);
  void set_peers(int index, const std::string& value);
  void set_peers(int index, std::string&& value);
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  std::string* add_peers();
  void add_peers(const std::string& value);
  void add_peers(std::string&& value);
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peers();
  private:
  const std::string& _internal_peers(int index) const;
  std::string* _internal_add_peers();
  public:

  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string path = 3;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .shorrent.Chunk.ChunkState state = 5;
  void clear_state();
  ::shorrent::Chunk_ChunkState state() const;
  void set_state(::shorrent::Chunk_ChunkState value);
  private:
  ::shorrent::Chunk_ChunkState _internal_state() const;
  void _internal_set_state(::shorrent::Chunk_ChunkState value);
  public:

  // @@protoc_insertion_point(class_scope:shorrent.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gbuffer_2eproto;
};
// -------------------------------------------------------------------

class File PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shorrent.File) */ {
 public:
  inline File() : File(nullptr) {}
  virtual ~File();

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(nullptr);
  }

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shorrent.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gbuffer_2eproto);
    return ::descriptor_table_gbuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 3,
    kFilenameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // repeated .shorrent.Chunk chunks = 3;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::shorrent::Chunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::Chunk >*
      mutable_chunks();
  private:
  const ::shorrent::Chunk& _internal_chunks(int index) const;
  ::shorrent::Chunk* _internal_add_chunks();
  public:
  const ::shorrent::Chunk& chunks(int index) const;
  ::shorrent::Chunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::Chunk >&
      chunks() const;

  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // uint32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:shorrent.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::Chunk > chunks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gbuffer_2eproto;
};
// -------------------------------------------------------------------

class RegFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shorrent.RegFile) */ {
 public:
  inline RegFile() : RegFile(nullptr) {}
  virtual ~RegFile();

  RegFile(const RegFile& from);
  RegFile(RegFile&& from) noexcept
    : RegFile() {
    *this = ::std::move(from);
  }

  inline RegFile& operator=(const RegFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegFile& operator=(RegFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegFile* internal_default_instance() {
    return reinterpret_cast<const RegFile*>(
               &_RegFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegFile& a, RegFile& b) {
    a.Swap(&b);
  }
  inline void Swap(RegFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegFile* New() const final {
    return CreateMaybeMessage<RegFile>(nullptr);
  }

  RegFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegFile& from);
  void MergeFrom(const RegFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shorrent.RegFile";
  }
  protected:
  explicit RegFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gbuffer_2eproto);
    return ::descriptor_table_gbuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .shorrent.File files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::shorrent::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::File >*
      mutable_files();
  private:
  const ::shorrent::File& _internal_files(int index) const;
  ::shorrent::File* _internal_add_files();
  public:
  const ::shorrent::File& files(int index) const;
  ::shorrent::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::File >&
      files() const;

  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:shorrent.RegFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::File > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gbuffer_2eproto;
};
// -------------------------------------------------------------------

class FileList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shorrent.FileList) */ {
 public:
  inline FileList() : FileList(nullptr) {}
  virtual ~FileList();

  FileList(const FileList& from);
  FileList(FileList&& from) noexcept
    : FileList() {
    *this = ::std::move(from);
  }

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileList& operator=(FileList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileList* internal_default_instance() {
    return reinterpret_cast<const FileList*>(
               &_FileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileList& a, FileList& b) {
    a.Swap(&b);
  }
  inline void Swap(FileList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileList* New() const final {
    return CreateMaybeMessage<FileList>(nullptr);
  }

  FileList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shorrent.FileList";
  }
  protected:
  explicit FileList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gbuffer_2eproto);
    return ::descriptor_table_gbuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
  };
  // repeated string files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  const std::string& files(int index) const;
  std::string* mutable_files(int index);
  void set_files(int index, const std::string& value);
  void set_files(int index, std::string&& value);
  void set_files(int index, const char* value);
  void set_files(int index, const char* value, size_t size);
  std::string* add_files();
  void add_files(const std::string& value);
  void add_files(std::string&& value);
  void add_files(const char* value);
  void add_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_files();
  private:
  const std::string& _internal_files(int index) const;
  std::string* _internal_add_files();
  public:

  // @@protoc_insertion_point(class_scope:shorrent.FileList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gbuffer_2eproto;
};
// -------------------------------------------------------------------

class RegChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shorrent.RegChunk) */ {
 public:
  inline RegChunk() : RegChunk(nullptr) {}
  virtual ~RegChunk();

  RegChunk(const RegChunk& from);
  RegChunk(RegChunk&& from) noexcept
    : RegChunk() {
    *this = ::std::move(from);
  }

  inline RegChunk& operator=(const RegChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegChunk& operator=(RegChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegChunk* internal_default_instance() {
    return reinterpret_cast<const RegChunk*>(
               &_RegChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegChunk& a, RegChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(RegChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegChunk* New() const final {
    return CreateMaybeMessage<RegChunk>(nullptr);
  }

  RegChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegChunk& from);
  void MergeFrom(const RegChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shorrent.RegChunk";
  }
  protected:
  explicit RegChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gbuffer_2eproto);
    return ::descriptor_table_gbuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:shorrent.RegChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gbuffer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chunk

// uint32 id = 1;
inline void Chunk::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::id() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.id)
  return _internal_id();
}
inline void Chunk::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Chunk::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:shorrent.Chunk.id)
}

// string filename = 2;
inline void Chunk::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Chunk::filename() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.filename)
  return _internal_filename();
}
inline void Chunk::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:shorrent.Chunk.filename)
}
inline std::string* Chunk::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:shorrent.Chunk.filename)
  return _internal_mutable_filename();
}
inline const std::string& Chunk::_internal_filename() const {
  return filename_.Get();
}
inline void Chunk::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Chunk::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorrent.Chunk.filename)
}
inline void Chunk::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorrent.Chunk.filename)
}
inline void Chunk::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorrent.Chunk.filename)
}
inline std::string* Chunk::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Chunk::release_filename() {
  // @@protoc_insertion_point(field_release:shorrent.Chunk.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Chunk::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorrent.Chunk.filename)
}

// string path = 3;
inline void Chunk::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Chunk::path() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.path)
  return _internal_path();
}
inline void Chunk::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:shorrent.Chunk.path)
}
inline std::string* Chunk::mutable_path() {
  // @@protoc_insertion_point(field_mutable:shorrent.Chunk.path)
  return _internal_mutable_path();
}
inline const std::string& Chunk::_internal_path() const {
  return path_.Get();
}
inline void Chunk::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Chunk::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorrent.Chunk.path)
}
inline void Chunk::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorrent.Chunk.path)
}
inline void Chunk::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorrent.Chunk.path)
}
inline std::string* Chunk::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Chunk::release_path() {
  // @@protoc_insertion_point(field_release:shorrent.Chunk.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Chunk::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorrent.Chunk.path)
}

// uint32 size = 4;
inline void Chunk::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Chunk::size() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.size)
  return _internal_size();
}
inline void Chunk::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void Chunk::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:shorrent.Chunk.size)
}

// .shorrent.Chunk.ChunkState state = 5;
inline void Chunk::clear_state() {
  state_ = 0;
}
inline ::shorrent::Chunk_ChunkState Chunk::_internal_state() const {
  return static_cast< ::shorrent::Chunk_ChunkState >(state_);
}
inline ::shorrent::Chunk_ChunkState Chunk::state() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.state)
  return _internal_state();
}
inline void Chunk::_internal_set_state(::shorrent::Chunk_ChunkState value) {
  
  state_ = value;
}
inline void Chunk::set_state(::shorrent::Chunk_ChunkState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:shorrent.Chunk.state)
}

// repeated string peers = 6;
inline int Chunk::_internal_peers_size() const {
  return peers_.size();
}
inline int Chunk::peers_size() const {
  return _internal_peers_size();
}
inline void Chunk::clear_peers() {
  peers_.Clear();
}
inline std::string* Chunk::add_peers() {
  // @@protoc_insertion_point(field_add_mutable:shorrent.Chunk.peers)
  return _internal_add_peers();
}
inline const std::string& Chunk::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const std::string& Chunk::peers(int index) const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.peers)
  return _internal_peers(index);
}
inline std::string* Chunk::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:shorrent.Chunk.peers)
  return peers_.Mutable(index);
}
inline void Chunk::set_peers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:shorrent.Chunk.peers)
  peers_.Mutable(index)->assign(value);
}
inline void Chunk::set_peers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:shorrent.Chunk.peers)
  peers_.Mutable(index)->assign(std::move(value));
}
inline void Chunk::set_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:shorrent.Chunk.peers)
}
inline void Chunk::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:shorrent.Chunk.peers)
}
inline std::string* Chunk::_internal_add_peers() {
  return peers_.Add();
}
inline void Chunk::add_peers(const std::string& value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:shorrent.Chunk.peers)
}
inline void Chunk::add_peers(std::string&& value) {
  peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:shorrent.Chunk.peers)
}
inline void Chunk::add_peers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:shorrent.Chunk.peers)
}
inline void Chunk::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:shorrent.Chunk.peers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Chunk::peers() const {
  // @@protoc_insertion_point(field_list:shorrent.Chunk.peers)
  return peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Chunk::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:shorrent.Chunk.peers)
  return &peers_;
}

// -------------------------------------------------------------------

// File

// string filename = 1;
inline void File::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& File::filename() const {
  // @@protoc_insertion_point(field_get:shorrent.File.filename)
  return _internal_filename();
}
inline void File::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:shorrent.File.filename)
}
inline std::string* File::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:shorrent.File.filename)
  return _internal_mutable_filename();
}
inline const std::string& File::_internal_filename() const {
  return filename_.Get();
}
inline void File::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void File::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorrent.File.filename)
}
inline void File::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorrent.File.filename)
}
inline void File::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorrent.File.filename)
}
inline std::string* File::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* File::release_filename() {
  // @@protoc_insertion_point(field_release:shorrent.File.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void File::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorrent.File.filename)
}

// uint32 size = 2;
inline void File::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 File::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 File::size() const {
  // @@protoc_insertion_point(field_get:shorrent.File.size)
  return _internal_size();
}
inline void File::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void File::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:shorrent.File.size)
}

// repeated .shorrent.Chunk chunks = 3;
inline int File::_internal_chunks_size() const {
  return chunks_.size();
}
inline int File::chunks_size() const {
  return _internal_chunks_size();
}
inline void File::clear_chunks() {
  chunks_.Clear();
}
inline ::shorrent::Chunk* File::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:shorrent.File.chunks)
  return chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::Chunk >*
File::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:shorrent.File.chunks)
  return &chunks_;
}
inline const ::shorrent::Chunk& File::_internal_chunks(int index) const {
  return chunks_.Get(index);
}
inline const ::shorrent::Chunk& File::chunks(int index) const {
  // @@protoc_insertion_point(field_get:shorrent.File.chunks)
  return _internal_chunks(index);
}
inline ::shorrent::Chunk* File::_internal_add_chunks() {
  return chunks_.Add();
}
inline ::shorrent::Chunk* File::add_chunks() {
  // @@protoc_insertion_point(field_add:shorrent.File.chunks)
  return _internal_add_chunks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::Chunk >&
File::chunks() const {
  // @@protoc_insertion_point(field_list:shorrent.File.chunks)
  return chunks_;
}

// -------------------------------------------------------------------

// RegFile

// string address = 1;
inline void RegFile::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegFile::address() const {
  // @@protoc_insertion_point(field_get:shorrent.RegFile.address)
  return _internal_address();
}
inline void RegFile::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:shorrent.RegFile.address)
}
inline std::string* RegFile::mutable_address() {
  // @@protoc_insertion_point(field_mutable:shorrent.RegFile.address)
  return _internal_mutable_address();
}
inline const std::string& RegFile::_internal_address() const {
  return address_.Get();
}
inline void RegFile::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegFile::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorrent.RegFile.address)
}
inline void RegFile::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorrent.RegFile.address)
}
inline void RegFile::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorrent.RegFile.address)
}
inline std::string* RegFile::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegFile::release_address() {
  // @@protoc_insertion_point(field_release:shorrent.RegFile.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegFile::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorrent.RegFile.address)
}

// repeated .shorrent.File files = 2;
inline int RegFile::_internal_files_size() const {
  return files_.size();
}
inline int RegFile::files_size() const {
  return _internal_files_size();
}
inline void RegFile::clear_files() {
  files_.Clear();
}
inline ::shorrent::File* RegFile::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:shorrent.RegFile.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::File >*
RegFile::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:shorrent.RegFile.files)
  return &files_;
}
inline const ::shorrent::File& RegFile::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::shorrent::File& RegFile::files(int index) const {
  // @@protoc_insertion_point(field_get:shorrent.RegFile.files)
  return _internal_files(index);
}
inline ::shorrent::File* RegFile::_internal_add_files() {
  return files_.Add();
}
inline ::shorrent::File* RegFile::add_files() {
  // @@protoc_insertion_point(field_add:shorrent.RegFile.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::shorrent::File >&
RegFile::files() const {
  // @@protoc_insertion_point(field_list:shorrent.RegFile.files)
  return files_;
}

// -------------------------------------------------------------------

// FileList

// repeated string files = 1;
inline int FileList::_internal_files_size() const {
  return files_.size();
}
inline int FileList::files_size() const {
  return _internal_files_size();
}
inline void FileList::clear_files() {
  files_.Clear();
}
inline std::string* FileList::add_files() {
  // @@protoc_insertion_point(field_add_mutable:shorrent.FileList.files)
  return _internal_add_files();
}
inline const std::string& FileList::_internal_files(int index) const {
  return files_.Get(index);
}
inline const std::string& FileList::files(int index) const {
  // @@protoc_insertion_point(field_get:shorrent.FileList.files)
  return _internal_files(index);
}
inline std::string* FileList::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:shorrent.FileList.files)
  return files_.Mutable(index);
}
inline void FileList::set_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:shorrent.FileList.files)
  files_.Mutable(index)->assign(value);
}
inline void FileList::set_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:shorrent.FileList.files)
  files_.Mutable(index)->assign(std::move(value));
}
inline void FileList::set_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:shorrent.FileList.files)
}
inline void FileList::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:shorrent.FileList.files)
}
inline std::string* FileList::_internal_add_files() {
  return files_.Add();
}
inline void FileList::add_files(const std::string& value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:shorrent.FileList.files)
}
inline void FileList::add_files(std::string&& value) {
  files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:shorrent.FileList.files)
}
inline void FileList::add_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:shorrent.FileList.files)
}
inline void FileList::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:shorrent.FileList.files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileList::files() const {
  // @@protoc_insertion_point(field_list:shorrent.FileList.files)
  return files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FileList::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:shorrent.FileList.files)
  return &files_;
}

// -------------------------------------------------------------------

// RegChunk

// string address = 1;
inline void RegChunk::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegChunk::address() const {
  // @@protoc_insertion_point(field_get:shorrent.RegChunk.address)
  return _internal_address();
}
inline void RegChunk::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:shorrent.RegChunk.address)
}
inline std::string* RegChunk::mutable_address() {
  // @@protoc_insertion_point(field_mutable:shorrent.RegChunk.address)
  return _internal_mutable_address();
}
inline const std::string& RegChunk::_internal_address() const {
  return address_.Get();
}
inline void RegChunk::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegChunk::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorrent.RegChunk.address)
}
inline void RegChunk::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorrent.RegChunk.address)
}
inline void RegChunk::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorrent.RegChunk.address)
}
inline std::string* RegChunk::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegChunk::release_address() {
  // @@protoc_insertion_point(field_release:shorrent.RegChunk.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegChunk::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorrent.RegChunk.address)
}

// string filename = 2;
inline void RegChunk::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegChunk::filename() const {
  // @@protoc_insertion_point(field_get:shorrent.RegChunk.filename)
  return _internal_filename();
}
inline void RegChunk::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:shorrent.RegChunk.filename)
}
inline std::string* RegChunk::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:shorrent.RegChunk.filename)
  return _internal_mutable_filename();
}
inline const std::string& RegChunk::_internal_filename() const {
  return filename_.Get();
}
inline void RegChunk::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegChunk::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorrent.RegChunk.filename)
}
inline void RegChunk::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorrent.RegChunk.filename)
}
inline void RegChunk::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorrent.RegChunk.filename)
}
inline std::string* RegChunk::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegChunk::release_filename() {
  // @@protoc_insertion_point(field_release:shorrent.RegChunk.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegChunk::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorrent.RegChunk.filename)
}

// uint32 id = 3;
inline void RegChunk::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegChunk::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegChunk::id() const {
  // @@protoc_insertion_point(field_get:shorrent.RegChunk.id)
  return _internal_id();
}
inline void RegChunk::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void RegChunk::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:shorrent.RegChunk.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace shorrent

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::shorrent::Chunk_ChunkState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shorrent::Chunk_ChunkState>() {
  return ::shorrent::Chunk_ChunkState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gbuffer_2eproto
