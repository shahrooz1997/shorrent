// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gbuffer.proto

#ifndef PROTOBUF_gbuffer_2eproto__INCLUDED
#define PROTOBUF_gbuffer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace shorrent {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_gbuffer_2eproto();
void protobuf_AssignDesc_gbuffer_2eproto();
void protobuf_ShutdownFile_gbuffer_2eproto();

class Chunk;
class Data;
class File;
class FileList;
class Operation;
class RegChunk;
class RegFile;

enum Chunk_ChunkState {
  Chunk_ChunkState_inTransfer = 0,
  Chunk_ChunkState_done = 1,
  Chunk_ChunkState_Chunk_ChunkState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Chunk_ChunkState_Chunk_ChunkState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Chunk_ChunkState_IsValid(int value);
const Chunk_ChunkState Chunk_ChunkState_ChunkState_MIN = Chunk_ChunkState_inTransfer;
const Chunk_ChunkState Chunk_ChunkState_ChunkState_MAX = Chunk_ChunkState_done;
const int Chunk_ChunkState_ChunkState_ARRAYSIZE = Chunk_ChunkState_ChunkState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chunk_ChunkState_descriptor();
inline const ::std::string& Chunk_ChunkState_Name(Chunk_ChunkState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chunk_ChunkState_descriptor(), value);
}
inline bool Chunk_ChunkState_Parse(
    const ::std::string& name, Chunk_ChunkState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chunk_ChunkState>(
    Chunk_ChunkState_descriptor(), name, value);
}
enum Operation_Type {
  Operation_Type_regFile = 0,
  Operation_Type_fileList = 1,
  Operation_Type_getFileInfo = 2,
  Operation_Type_regChunk = 3,
  Operation_Type_ok = 4,
  Operation_Type_getChunk = 5,
  Operation_Type_Operation_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Operation_Type_Operation_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Operation_Type_IsValid(int value);
const Operation_Type Operation_Type_Type_MIN = Operation_Type_regFile;
const Operation_Type Operation_Type_Type_MAX = Operation_Type_getChunk;
const int Operation_Type_Type_ARRAYSIZE = Operation_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Type_descriptor();
inline const ::std::string& Operation_Type_Name(Operation_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Type_descriptor(), value);
}
inline bool Operation_Type_Parse(
    const ::std::string& name, Operation_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Type>(
    Operation_Type_descriptor(), name, value);
}
// ===================================================================

class Chunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shorrent.Chunk) */ {
 public:
  Chunk();
  virtual ~Chunk();

  Chunk(const Chunk& from);

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chunk& default_instance();

  void Swap(Chunk* other);

  // implements Message ----------------------------------------------

  inline Chunk* New() const { return New(NULL); }

  Chunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Chunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Chunk_ChunkState ChunkState;
  static const ChunkState inTransfer =
    Chunk_ChunkState_inTransfer;
  static const ChunkState done =
    Chunk_ChunkState_done;
  static inline bool ChunkState_IsValid(int value) {
    return Chunk_ChunkState_IsValid(value);
  }
  static const ChunkState ChunkState_MIN =
    Chunk_ChunkState_ChunkState_MIN;
  static const ChunkState ChunkState_MAX =
    Chunk_ChunkState_ChunkState_MAX;
  static const int ChunkState_ARRAYSIZE =
    Chunk_ChunkState_ChunkState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChunkState_descriptor() {
    return Chunk_ChunkState_descriptor();
  }
  static inline const ::std::string& ChunkState_Name(ChunkState value) {
    return Chunk_ChunkState_Name(value);
  }
  static inline bool ChunkState_Parse(const ::std::string& name,
      ChunkState* value) {
    return Chunk_ChunkState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional uint32 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // optional .shorrent.Chunk.ChunkState state = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::shorrent::Chunk_ChunkState state() const;
  void set_state(::shorrent::Chunk_ChunkState value);

  // repeated string peers = 6;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 6;
  const ::std::string& peers(int index) const;
  ::std::string* mutable_peers(int index);
  void set_peers(int index, const ::std::string& value);
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  ::std::string* add_peers();
  void add_peers(const ::std::string& value);
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peers();

  // @@protoc_insertion_point(class_scope:shorrent.Chunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peers_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gbuffer_2eproto();
  friend void protobuf_AssignDesc_gbuffer_2eproto();
  friend void protobuf_ShutdownFile_gbuffer_2eproto();

  void InitAsDefaultInstance();
  static Chunk* default_instance_;
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shorrent.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  void Swap(File* other);

  // implements Message ----------------------------------------------

  inline File* New() const { return New(NULL); }

  File* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // repeated .shorrent.Chunk chunks = 3;
  int chunks_size() const;
  void clear_chunks();
  static const int kChunksFieldNumber = 3;
  const ::shorrent::Chunk& chunks(int index) const;
  ::shorrent::Chunk* mutable_chunks(int index);
  ::shorrent::Chunk* add_chunks();
  ::google::protobuf::RepeatedPtrField< ::shorrent::Chunk >*
      mutable_chunks();
  const ::google::protobuf::RepeatedPtrField< ::shorrent::Chunk >&
      chunks() const;

  // @@protoc_insertion_point(class_scope:shorrent.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::RepeatedPtrField< ::shorrent::Chunk > chunks_;
  ::google::protobuf::uint32 size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gbuffer_2eproto();
  friend void protobuf_AssignDesc_gbuffer_2eproto();
  friend void protobuf_ShutdownFile_gbuffer_2eproto();

  void InitAsDefaultInstance();
  static File* default_instance_;
};
// -------------------------------------------------------------------

class RegFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shorrent.RegFile) */ {
 public:
  RegFile();
  virtual ~RegFile();

  RegFile(const RegFile& from);

  inline RegFile& operator=(const RegFile& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegFile& default_instance();

  void Swap(RegFile* other);

  // implements Message ----------------------------------------------

  inline RegFile* New() const { return New(NULL); }

  RegFile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegFile& from);
  void MergeFrom(const RegFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // repeated .shorrent.File files = 2;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 2;
  const ::shorrent::File& files(int index) const;
  ::shorrent::File* mutable_files(int index);
  ::shorrent::File* add_files();
  ::google::protobuf::RepeatedPtrField< ::shorrent::File >*
      mutable_files();
  const ::google::protobuf::RepeatedPtrField< ::shorrent::File >&
      files() const;

  // @@protoc_insertion_point(class_scope:shorrent.RegFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::RepeatedPtrField< ::shorrent::File > files_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gbuffer_2eproto();
  friend void protobuf_AssignDesc_gbuffer_2eproto();
  friend void protobuf_ShutdownFile_gbuffer_2eproto();

  void InitAsDefaultInstance();
  static RegFile* default_instance_;
};
// -------------------------------------------------------------------

class FileList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shorrent.FileList) */ {
 public:
  FileList();
  virtual ~FileList();

  FileList(const FileList& from);

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileList& default_instance();

  void Swap(FileList* other);

  // implements Message ----------------------------------------------

  inline FileList* New() const { return New(NULL); }

  FileList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .shorrent.File files = 1;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 1;
  const ::shorrent::File& files(int index) const;
  ::shorrent::File* mutable_files(int index);
  ::shorrent::File* add_files();
  ::google::protobuf::RepeatedPtrField< ::shorrent::File >*
      mutable_files();
  const ::google::protobuf::RepeatedPtrField< ::shorrent::File >&
      files() const;

  // @@protoc_insertion_point(class_scope:shorrent.FileList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::shorrent::File > files_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gbuffer_2eproto();
  friend void protobuf_AssignDesc_gbuffer_2eproto();
  friend void protobuf_ShutdownFile_gbuffer_2eproto();

  void InitAsDefaultInstance();
  static FileList* default_instance_;
};
// -------------------------------------------------------------------

class RegChunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shorrent.RegChunk) */ {
 public:
  RegChunk();
  virtual ~RegChunk();

  RegChunk(const RegChunk& from);

  inline RegChunk& operator=(const RegChunk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegChunk& default_instance();

  void Swap(RegChunk* other);

  // implements Message ----------------------------------------------

  inline RegChunk* New() const { return New(NULL); }

  RegChunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegChunk& from);
  void MergeFrom(const RegChunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:shorrent.RegChunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gbuffer_2eproto();
  friend void protobuf_AssignDesc_gbuffer_2eproto();
  friend void protobuf_ShutdownFile_gbuffer_2eproto();

  void InitAsDefaultInstance();
  static RegChunk* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shorrent.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  inline Data* New() const { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:shorrent.Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gbuffer_2eproto();
  friend void protobuf_AssignDesc_gbuffer_2eproto();
  friend void protobuf_ShutdownFile_gbuffer_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shorrent.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();

  void Swap(Operation* other);

  // implements Message ----------------------------------------------

  inline Operation* New() const { return New(NULL); }

  Operation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Operation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Operation_Type Type;
  static const Type regFile =
    Operation_Type_regFile;
  static const Type fileList =
    Operation_Type_fileList;
  static const Type getFileInfo =
    Operation_Type_getFileInfo;
  static const Type regChunk =
    Operation_Type_regChunk;
  static const Type ok =
    Operation_Type_ok;
  static const Type getChunk =
    Operation_Type_getChunk;
  static inline bool Type_IsValid(int value) {
    return Operation_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Operation_Type_Type_MIN;
  static const Type Type_MAX =
    Operation_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Operation_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Operation_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Operation_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Operation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .shorrent.Operation.Type op = 1;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::shorrent::Operation_Type op() const;
  void set_op(::shorrent::Operation_Type value);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:shorrent.Operation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int op_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gbuffer_2eproto();
  friend void protobuf_AssignDesc_gbuffer_2eproto();
  friend void protobuf_ShutdownFile_gbuffer_2eproto();

  void InitAsDefaultInstance();
  static Operation* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Chunk

// optional uint32 id = 1;
inline void Chunk::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Chunk::id() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.id)
  return id_;
}
inline void Chunk::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:shorrent.Chunk.id)
}

// optional string filename = 2;
inline void Chunk::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chunk::filename() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chunk::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shorrent.Chunk.filename)
}
inline void Chunk::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shorrent.Chunk.filename)
}
inline void Chunk::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shorrent.Chunk.filename)
}
inline ::std::string* Chunk::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:shorrent.Chunk.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chunk::release_filename() {
  // @@protoc_insertion_point(field_release:shorrent.Chunk.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chunk::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:shorrent.Chunk.filename)
}

// optional string path = 3;
inline void Chunk::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chunk::path() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chunk::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shorrent.Chunk.path)
}
inline void Chunk::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shorrent.Chunk.path)
}
inline void Chunk::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shorrent.Chunk.path)
}
inline ::std::string* Chunk::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:shorrent.Chunk.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chunk::release_path() {
  // @@protoc_insertion_point(field_release:shorrent.Chunk.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chunk::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:shorrent.Chunk.path)
}

// optional uint32 size = 4;
inline void Chunk::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 Chunk::size() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.size)
  return size_;
}
inline void Chunk::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:shorrent.Chunk.size)
}

// optional .shorrent.Chunk.ChunkState state = 5;
inline void Chunk::clear_state() {
  state_ = 0;
}
inline ::shorrent::Chunk_ChunkState Chunk::state() const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.state)
  return static_cast< ::shorrent::Chunk_ChunkState >(state_);
}
inline void Chunk::set_state(::shorrent::Chunk_ChunkState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:shorrent.Chunk.state)
}

// repeated string peers = 6;
inline int Chunk::peers_size() const {
  return peers_.size();
}
inline void Chunk::clear_peers() {
  peers_.Clear();
}
inline const ::std::string& Chunk::peers(int index) const {
  // @@protoc_insertion_point(field_get:shorrent.Chunk.peers)
  return peers_.Get(index);
}
inline ::std::string* Chunk::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:shorrent.Chunk.peers)
  return peers_.Mutable(index);
}
inline void Chunk::set_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:shorrent.Chunk.peers)
  peers_.Mutable(index)->assign(value);
}
inline void Chunk::set_peers(int index, const char* value) {
  peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:shorrent.Chunk.peers)
}
inline void Chunk::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:shorrent.Chunk.peers)
}
inline ::std::string* Chunk::add_peers() {
  // @@protoc_insertion_point(field_add_mutable:shorrent.Chunk.peers)
  return peers_.Add();
}
inline void Chunk::add_peers(const ::std::string& value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:shorrent.Chunk.peers)
}
inline void Chunk::add_peers(const char* value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:shorrent.Chunk.peers)
}
inline void Chunk::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:shorrent.Chunk.peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Chunk::peers() const {
  // @@protoc_insertion_point(field_list:shorrent.Chunk.peers)
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Chunk::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:shorrent.Chunk.peers)
  return &peers_;
}

// -------------------------------------------------------------------

// File

// optional string filename = 1;
inline void File::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::filename() const {
  // @@protoc_insertion_point(field_get:shorrent.File.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shorrent.File.filename)
}
inline void File::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shorrent.File.filename)
}
inline void File::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shorrent.File.filename)
}
inline ::std::string* File::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:shorrent.File.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_filename() {
  // @@protoc_insertion_point(field_release:shorrent.File.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:shorrent.File.filename)
}

// optional uint32 size = 2;
inline void File::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 File::size() const {
  // @@protoc_insertion_point(field_get:shorrent.File.size)
  return size_;
}
inline void File::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:shorrent.File.size)
}

// repeated .shorrent.Chunk chunks = 3;
inline int File::chunks_size() const {
  return chunks_.size();
}
inline void File::clear_chunks() {
  chunks_.Clear();
}
inline const ::shorrent::Chunk& File::chunks(int index) const {
  // @@protoc_insertion_point(field_get:shorrent.File.chunks)
  return chunks_.Get(index);
}
inline ::shorrent::Chunk* File::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:shorrent.File.chunks)
  return chunks_.Mutable(index);
}
inline ::shorrent::Chunk* File::add_chunks() {
  // @@protoc_insertion_point(field_add:shorrent.File.chunks)
  return chunks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::shorrent::Chunk >*
File::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:shorrent.File.chunks)
  return &chunks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::shorrent::Chunk >&
File::chunks() const {
  // @@protoc_insertion_point(field_list:shorrent.File.chunks)
  return chunks_;
}

// -------------------------------------------------------------------

// RegFile

// optional string address = 1;
inline void RegFile::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegFile::address() const {
  // @@protoc_insertion_point(field_get:shorrent.RegFile.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegFile::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shorrent.RegFile.address)
}
inline void RegFile::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shorrent.RegFile.address)
}
inline void RegFile::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shorrent.RegFile.address)
}
inline ::std::string* RegFile::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:shorrent.RegFile.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegFile::release_address() {
  // @@protoc_insertion_point(field_release:shorrent.RegFile.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegFile::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:shorrent.RegFile.address)
}

// repeated .shorrent.File files = 2;
inline int RegFile::files_size() const {
  return files_.size();
}
inline void RegFile::clear_files() {
  files_.Clear();
}
inline const ::shorrent::File& RegFile::files(int index) const {
  // @@protoc_insertion_point(field_get:shorrent.RegFile.files)
  return files_.Get(index);
}
inline ::shorrent::File* RegFile::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:shorrent.RegFile.files)
  return files_.Mutable(index);
}
inline ::shorrent::File* RegFile::add_files() {
  // @@protoc_insertion_point(field_add:shorrent.RegFile.files)
  return files_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::shorrent::File >*
RegFile::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:shorrent.RegFile.files)
  return &files_;
}
inline const ::google::protobuf::RepeatedPtrField< ::shorrent::File >&
RegFile::files() const {
  // @@protoc_insertion_point(field_list:shorrent.RegFile.files)
  return files_;
}

// -------------------------------------------------------------------

// FileList

// repeated .shorrent.File files = 1;
inline int FileList::files_size() const {
  return files_.size();
}
inline void FileList::clear_files() {
  files_.Clear();
}
inline const ::shorrent::File& FileList::files(int index) const {
  // @@protoc_insertion_point(field_get:shorrent.FileList.files)
  return files_.Get(index);
}
inline ::shorrent::File* FileList::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:shorrent.FileList.files)
  return files_.Mutable(index);
}
inline ::shorrent::File* FileList::add_files() {
  // @@protoc_insertion_point(field_add:shorrent.FileList.files)
  return files_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::shorrent::File >*
FileList::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:shorrent.FileList.files)
  return &files_;
}
inline const ::google::protobuf::RepeatedPtrField< ::shorrent::File >&
FileList::files() const {
  // @@protoc_insertion_point(field_list:shorrent.FileList.files)
  return files_;
}

// -------------------------------------------------------------------

// RegChunk

// optional string address = 1;
inline void RegChunk::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegChunk::address() const {
  // @@protoc_insertion_point(field_get:shorrent.RegChunk.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegChunk::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shorrent.RegChunk.address)
}
inline void RegChunk::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shorrent.RegChunk.address)
}
inline void RegChunk::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shorrent.RegChunk.address)
}
inline ::std::string* RegChunk::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:shorrent.RegChunk.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegChunk::release_address() {
  // @@protoc_insertion_point(field_release:shorrent.RegChunk.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegChunk::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:shorrent.RegChunk.address)
}

// optional string filename = 2;
inline void RegChunk::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegChunk::filename() const {
  // @@protoc_insertion_point(field_get:shorrent.RegChunk.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegChunk::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shorrent.RegChunk.filename)
}
inline void RegChunk::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shorrent.RegChunk.filename)
}
inline void RegChunk::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shorrent.RegChunk.filename)
}
inline ::std::string* RegChunk::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:shorrent.RegChunk.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegChunk::release_filename() {
  // @@protoc_insertion_point(field_release:shorrent.RegChunk.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegChunk::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:shorrent.RegChunk.filename)
}

// optional uint32 id = 3;
inline void RegChunk::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RegChunk::id() const {
  // @@protoc_insertion_point(field_get:shorrent.RegChunk.id)
  return id_;
}
inline void RegChunk::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:shorrent.RegChunk.id)
}

// -------------------------------------------------------------------

// Data

// optional bytes data = 1;
inline void Data::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Data::data() const {
  // @@protoc_insertion_point(field_get:shorrent.Data.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shorrent.Data.data)
}
inline void Data::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shorrent.Data.data)
}
inline void Data::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shorrent.Data.data)
}
inline ::std::string* Data::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:shorrent.Data.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Data::release_data() {
  // @@protoc_insertion_point(field_release:shorrent.Data.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:shorrent.Data.data)
}

// -------------------------------------------------------------------

// Operation

// optional .shorrent.Operation.Type op = 1;
inline void Operation::clear_op() {
  op_ = 0;
}
inline ::shorrent::Operation_Type Operation::op() const {
  // @@protoc_insertion_point(field_get:shorrent.Operation.op)
  return static_cast< ::shorrent::Operation_Type >(op_);
}
inline void Operation::set_op(::shorrent::Operation_Type value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:shorrent.Operation.op)
}

// optional bytes data = 2;
inline void Operation::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::data() const {
  // @@protoc_insertion_point(field_get:shorrent.Operation.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shorrent.Operation.data)
}
inline void Operation::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shorrent.Operation.data)
}
inline void Operation::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shorrent.Operation.data)
}
inline ::std::string* Operation::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:shorrent.Operation.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_data() {
  // @@protoc_insertion_point(field_release:shorrent.Operation.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:shorrent.Operation.data)
}

// optional string msg = 3;
inline void Operation::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::msg() const {
  // @@protoc_insertion_point(field_get:shorrent.Operation.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:shorrent.Operation.msg)
}
inline void Operation::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:shorrent.Operation.msg)
}
inline void Operation::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:shorrent.Operation.msg)
}
inline ::std::string* Operation::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:shorrent.Operation.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_msg() {
  // @@protoc_insertion_point(field_release:shorrent.Operation.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:shorrent.Operation.msg)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace shorrent

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::shorrent::Chunk_ChunkState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shorrent::Chunk_ChunkState>() {
  return ::shorrent::Chunk_ChunkState_descriptor();
}
template <> struct is_proto_enum< ::shorrent::Operation_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shorrent::Operation_Type>() {
  return ::shorrent::Operation_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gbuffer_2eproto__INCLUDED
